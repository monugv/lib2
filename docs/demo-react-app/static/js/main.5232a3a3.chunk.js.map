{"version":3,"sources":["ims/constants/ImsWebConstants.js","ims/ims-web-helper/ImsWebHelper.js","ims/components/Button.js","ims/Ims-Presentation.js","ims/actions/ims-actions.js","ims/data/ims-data.js","ims/Ims-Cdn.js","ims/Ims-Npm.js","ims/Ims-Npm-Multiple-Clients.js","ims/Home.js","ims/Ims-Thin-Presentation.js","ims/Ims-Thin.js","ims/Ims-Thin-Npm.js","App.js","serviceWorker.js","index.js"],"names":["ImsWebConstants","initialUrl","locationUrl","imslibLocation","imslibThinLocation","window","adobeIMS","Promise","resolve","imslibPath","this","addScript","url","reject","scriptElement","document","createElement","src","onload","val","onerror","err","onabort","head","appendChild","Button","props","handler","text","className","onClick","Component","ImsPresentation","imsActions","signIn","getAccessToken","getProfile","getReleaseFlags","refreshToken","validateToken","isSignedInUser","reAuthenticateCheck","reAuthenticateForce","signOut","listSocialProviders","signInWithSocialProvider","avatarUrl","imslibData","ImsActions","imsLib","imsData","then","profile","adobeIdData","onProfile","flags","catch","ex","onError","getFragmentValues","fragmentValues","token","onAccessToken","reAuthenticate","isTokenvalid","onTokenValid","socialProviders","onSocialProviders","ImsData","onStateChanged","adobeid","tokenValid","reauthToken","tokenHasExpired","ready","error","appState","client_id","scope","locale","environment","triggerOnStateChanged","onAccessTokenHasExpired","onReauthAccessToken","errortype","onReady","context","valid","newState","ImsCdn","imsEvents","setState","state","initialized","ImsWebHelper","injectAdobeIms","React","ImsNpm","AdobeIMS","initialize","ImsNpmMultipleClients","client0","key","logsEnabled","client1","Home","href","ImsThinPresentation","ImsThin","injectAdobeImsThin","ImsThinNpm","AdobeIMSThin","App","getOldHash","source","match","decodeURIComponent","oldHash","location","hash","xmlns","width","height","viewBox","focusable","fill","d","to","path","component","push","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.5232a3a3.chunk.js","sourcesContent":["const ImsWebConstants = {\n    initialUrl: 'http://localhost:3000/',\n    locationUrl: 'https://localhost.corp.adobe.com:9000',\n    imslibLocation: 'https://auth-stg1.services.adobe.com/imslib/imslib.js',\n    imslibThinLocation: 'https://auth-stg1.services.adobe.com/imslib/imslib-thin.js',\n};\n\nexport default ImsWebConstants;","import ImsWebConstants from \"../constants/ImsWebConstants\";\n\n/**\n * class used to inject the adobeims library\n */\nclass ImsWebHelper {\n  /**\n   * method used to inject the adobe ims library\n   */\n  injectAdobeIms() {\n    if (window.adobeIMS) {\n      return Promise.resolve(true);\n    }\n    const imslibPath = ImsWebConstants.imslibLocation;\n    return this.addScript(imslibPath);\n  }\n\n  injectAdobeImsThin() {\n    return this.addScript(ImsWebConstants.imslibThinLocation);\n  }\n\n  /**\n   *\n   * @param {*} url represents the url of the script which will be injected\n   */\n  addScript(url) {\n    return new Promise((resolve, reject) => {\n      var scriptElement = document.createElement(\"script\");\n      scriptElement.src = url;\n      scriptElement.onload = (val) => {\n        resolve(val);\n      };\n      scriptElement.onerror = (err) => {\n        reject(err);\n      };\n      scriptElement.onabort = (err) => {\n        reject(err);\n      };\n\n      document.head.appendChild(scriptElement);\n    });\n  }\n}\n\nexport default new ImsWebHelper();\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport './button.css';\n\nexport default class Button extends Component {\n  \n  render() {\n    const {handler, text} = this.props;\n    return (\n      <button className=\"btn\" onClick={() => handler()}>\n        {text}  \n      </button>\n    );\n  }\n}\n\nButton.propTypes = {\n  handler: PropTypes.func,\n  text: PropTypes.string\n};\n","import React from \"react\";\nimport Button from \"./components/Button\";\n\nimport \"./ims.css\";\n\nimport ReactJson from \"react-json-view\";\n\nconst ImsPresentation = (props) => (\n  <div className=\"row\">\n    <div>\n      <Button handler={props.imsActions.signIn} text={\"Sign In\"}></Button>\n    </div>\n\n    <div>\n      <Button\n        handler={props.imsActions.getAccessToken}\n        text={\"Get Access Token\"}\n      ></Button>\n    </div>\n\n    <div>\n      <Button\n        handler={props.imsActions.getProfile}\n        text={\"Get profile\"}\n      ></Button>\n    </div>\n\n\n    <div>\n      <Button\n        handler={props.imsActions.getReleaseFlags}\n        text={\"Get release flags\"}\n      ></Button>\n    </div>\n\n    \n\n    <div>\n      <Button\n        handler={props.imsActions.refreshToken}\n        text={\"Refresh Token\"}\n      ></Button>\n    </div>\n\n    <div>\n      <Button\n        handler={props.imsActions.validateToken}\n        text={\"Validate Token\"}\n      ></Button>\n    </div>\n\n    <div>\n      <Button\n        handler={props.imsActions.isSignedInUser}\n        text={\"Is User Signed In\"}\n      ></Button>\n    </div>\n\n    <div>\n      <Button\n        handler={props.imsActions.reAuthenticateCheck}\n        text={\"Reauth (check)\"}\n      ></Button>\n    </div>\n\n    <div>\n      <Button\n        handler={props.imsActions.reAuthenticateForce}\n        text={\"Reuth (force)\"}\n      ></Button>\n    </div>\n\n    <div>\n      <Button handler={props.imsActions.signOut} text={\"Sign Out\"}></Button>\n    </div>\n\n    <div>\n      <Button\n        handler={props.imsActions.listSocialProviders}\n        text={\"ListSocialProvidersSign\"}\n      ></Button>\n    </div>\n\n    <div>\n      <Button\n        handler={props.imsActions.signInWithSocialProvider}\n        text={\"signInWithSocialProvider\"}\n      ></Button>\n    </div>\n\n    <div>\n      <Button handler={props.imsActions.avatarUrl} text={\"avatar url\"}></Button>\n    </div>\n\n    <ReactJson src={props.imslibData} />\n  </div>\n);\n\nexport default ImsPresentation;\n","/**\n * this class contains the available ims lib actions;\n */\nexport class ImsActions {\n  imsLib = null;\n  imsData = null;\n  constructor(imsLib, imsData) {\n    this.imsLib = imsLib;\n    this.imsData = imsData;\n  }\n\n  getProfile = () => {\n    this.imsLib.getProfile().then(profile => {\n      this.imsData.adobeIdData.onProfile(profile);\n    });\n  }\n\n  getReleaseFlags = () => {\n    this.imsLib.getReleaseFlags().then(flags => {\n      this.imsData.adobeIdData.flags = flags;\n    })\n    .catch(ex => this.imsData.adobeIdData.onError(ex));\n  }\n\n  signIn = () => {\n    this.imsLib.signIn();\n  };\n\n  signOut = () => {\n    this.imsLib.signOut();\n  };\n\n  getFragmentValues = () => {\n    return this.imsLib.fragmentValues();\n  };\n\n  getAccessToken = () => {\n    const token = this.imsLib.getAccessToken();\n    this.imsData.adobeIdData.onAccessToken(token);\n  };\n\n  refreshToken = () => {\n    this.imsLib.refreshToken();\n  };\n\n  isSignedInUser = () => {\n    return this.imsLib.isSignedInUser();\n  };\n\n  reAuthenticateCheck = () => {\n    this.imsLib.reAuthenticate();\n  };\n\n  reAuthenticateForce = () => {\n    this.imsLib.reAuthenticate({}, \"force\");\n  };\n\n  getProfile = () => {\n    this.imsLib\n      .getProfile()\n      .then((profile) => {\n        this.imsData.adobeIdData.onProfile(profile);\n      })\n      .catch((ex) => {\n        this.imsData.adobeIdData.onError(ex);\n      });\n  };\n\n  validateToken = () => {\n    this.imsLib\n      .validateToken()\n      .then((isTokenvalid) => {\n        this.imsData.onTokenValid(isTokenvalid);\n      })\n      .catch((ex) => {\n        this.imsData.adobeIdData.onError(ex);\n      });\n  };\n\n  listSocialProviders = () => {\n    this.imsLib\n      .listSocialProviders()\n      .then((socialProviders) => {\n        this.imsData.adobeIdData.onSocialProviders(socialProviders);\n      })\n      .catch((ex) => {\n        this.imsData.adobeIdData.onError(ex);\n      });\n  };\n\n  signInWithSocialProvider = () => {\n    this.imsLib.signInWithSocialProvider(\"google\");\n  };\n\n  avatarUrl = () => {\n    return this.imsLib.avatarUrl;\n  };\n}\n","export class ImsData {\n  imslibData = {\n    token: null,\n    tokenValid: false,\n    isSignedInUser: false,\n    reauthToken: null,\n    tokenHasExpired: false,\n    ready: false,\n    error: null,\n    profile: null,\n    appState: null,\n  };\n\n  onStateChanged = null;\n\n  triggerOnStateChanged(newState) {\n    this.imslibData = { ...newState };\n\n    this.onStateChanged(newState);\n  }\n\n  constructor(onStateChanged, adobeid = null) {\n    this.onStateChanged = onStateChanged;\n    if (adobeid) {\n      this.adobeIdData = {\n        ...this.adobeIdData,\n        ...adobeid,\n      };\n    }\n  }\n\n  adobeIdData = {\n    client_id: \"IMSLibJSTestClient\",\n    scope: \"AdobeID,openid,creative_cloud\",\n    locale: \"en_US\",\n    environment: \"stg1\",\n    onAccessToken: (token) => {\n      const imslibData = {\n        ...this.imslibData,\n        token,\n        isSignedInUser: true,\n      };\n      this.triggerOnStateChanged(imslibData);\n    },\n    onAccessTokenHasExpired: () => {\n      const imslibData = {\n        ...this.imslibData,\n        tokenHasExpired: true,\n      };\n      this.triggerOnStateChanged(imslibData);\n    },\n    onReauthAccessToken: (reauthToken) => {\n      const imslibData = {\n        ...this.imslibData,\n        reauthToken,\n        isSignedInUser: true,\n      };\n      this.triggerOnStateChanged(imslibData);\n    },\n    onError: (errortype, error) => {\n      const imslibData = {\n        ...this.imslibData,\n        error: {\n          errortype,\n          error,\n        },\n        isSignedInUser: true,\n      };\n      this.triggerOnStateChanged(imslibData);\n    },\n    onReady: (context) => {\n      const imslibData = {\n        ...this.imslibData,\n        ready: true,\n        appState: context,\n      };\n      this.triggerOnStateChanged(imslibData);\n    },\n    onProfile: (profile) => {\n      const imslibData = {\n        ...this.imslibData,\n        profile,\n      };\n      this.triggerOnStateChanged(imslibData);\n    },\n  };\n\n  onTokenValid = (valid) => {\n    const imslibData = {\n      ...this.imslibData,\n      tokenValid: valid,\n      isSignedInUser: true,\n    };\n    this.triggerOnStateChanged(imslibData);\n  };\n}\n","import React from \"react\";\n\nimport ImsWebHelper from \"./ims-web-helper/ImsWebHelper\";\n\nimport ImsPresentation from \"./Ims-Presentation\";\n\nimport \"./ims.css\";\n\nimport { ImsActions } from \"./actions/ims-actions\";\nimport { ImsData } from \"./data/ims-data\";\n\nexport default class ImsCdn extends React.Component {\n  imsActions = null;\n  imsEvents = null;\n  constructor() {\n    super();\n\n    const imsData = new ImsData(this.onStateChanged);\n\n    window.adobeid = imsData.adobeIdData;\n\n    this.state = {\n      initialized: false,\n      imslibData: imsData.imslibData,\n    };\n\n    ImsWebHelper.injectAdobeIms().then(() => {\n      this.adobeIMS = window.adobeIMS;\n      this.imsActions = new ImsActions(this.adobeIMS, imsData);\n\n      this.setState({ initialized: true });\n    });\n  }\n\n  onStateChanged = (newState) => {\n    this.setState({ imslibData: newState });\n  };\n\n  render() {\n    if (!this.state.initialized) {\n      return <div>LOADING...</div>;\n    }\n\n    return (\n      <ImsPresentation\n        imsActions={this.imsActions}\n        imslibData={this.state.imslibData}\n      ></ImsPresentation>\n    );\n  }\n}\n","import React from \"react\";\nimport ImsPresentation from \"./Ims-Presentation\";\n\nimport \"./ims.css\";\n\nimport { ImsActions } from \"./actions/ims-actions\";\nimport { ImsData } from \"./data/ims-data\";\nimport { AdobeIMS } from \"@identity/imslib\";\n\nexport default class ImsNpm extends React.Component {\n  imsActions = null;\n  imsEvents = null;\n  constructor(props) {\n    super();\n\n    const { adobeid } = props;\n    const imsData = new ImsData(this.onStateChanged, adobeid);\n\n    this.adobeIMS = new AdobeIMS(imsData.adobeIdData);\n\n    this.state = {\n      initialized: true,\n      imslibData: imsData.imslibData,\n    };\n\n    this.imsActions = new ImsActions(this.adobeIMS, imsData);\n\n    this.adobeIMS.initialize();\n  }\n\n  onStateChanged = (newState) => {\n    this.setState({ imslibData: newState });\n  };\n\n  render() {\n    if (!this.state.initialized) {\n      return <div>LOADING...</div>;\n    }\n\n    return (\n      <ImsPresentation\n        imsActions={this.imsActions}\n        imslibData={this.state.imslibData}\n      ></ImsPresentation>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./ims.css\";\nimport ImsNpm from \"./Ims-Npm\";\n\nexport default class ImsNpmMultipleClients extends React.Component {\n  imsActions = null;\n  imsEvents = null;\n\n  client0 = {\n    client_id: \"IMSLibJSTestClient\",\n    locale: \"en_US\",\n    scope: \"AdobeID,openid\",\n    environment: \"stage\",\n    key: \"adobeIMS\",\n    logsEnabled: true,\n  };\n  client1 = {\n    client_id: \"IMSLibJSTestClient1\",\n    locale: \"en_US\",\n    scope: \"AdobeID,openid\",\n    environment: \"stage\",\n    key: \"client1\",\n    logsEnabled: true,\n  };\n\n  render() {\n    return (\n      <div className=\"row\">\n        <ImsNpm adobeid={this.client0} />\n        <ImsNpm adobeid={this.client1} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport \"./home.css\";\n\nconst Home = () => (\n    <div className=\"center-xs\">\n      <div>\n        This is a demo application used to help developers to integrate imslib\n        v2\n      </div>\n\n      <div>The application contains the following features:</div>\n      <ul>\n        <li>\n          <strong>CDN</strong> (the imslib.js file is read from\n          https://auth-stg1.services.adobe.com/imslib/imslib.js)\n        </li>\n\n        <li>\n          <strong>NPM</strong> (the imslib is installed by using the npm)\n        </li>\n        <li>\n          <strong>Thin</strong> (the imslib.js file is read from\n          https://auth-stg1.services.adobe.com/imslib/imslib-thin.js)\n        </li>\n        <li>\n          <strong>Thin (NPM)</strong>\n          the thin version of imslib is added by installing the thin package\n          library\n        </li>\n      </ul>\n\n      <div className=\"container-fluid row\">\n        <div className=\"center-xs row mt3\">\n          <a href=\"/pages/IMS/imslib2.js/demo-react-app/#/cdn\" className=\"item bgimg bgimg-cdn  cursor-pointer\">\n            <div className=\"title\">CDN</div>\n          </a>\n\n          <a href=\"/pages/IMS/imslib2.js/demo-react-app/#/npm\" className=\"item bgimg bgimg-npm  cursor-pointer\">\n            <div className=\"title\">NPM</div>\n          </a>\n\n          <a href=\"/pages/IMS/imslib2.js/demo-react-app/#/thin\" className=\"item bgimg bgimg-thin  cursor-pointer\">\n            Thin (CDN)\n          </a>\n\n          <a\n            href=\"/pages/IMS/imslib2.js/demo-react-app/#/thinnpm\"\n            className=\" item bgimg bgimg-npm  cursor-pointer\"\n          >\n            Thin(NPM)\n          </a>\n        </div>\n      </div>\n    </div>\n);\nexport default Home;\n","import React from \"react\";\nimport Button from \"./components/Button\";\n\nimport \"./ims.css\";\n\nimport ReactJson from \"react-json-view\";\n\nconst ImsThinPresentation = (props) => (\n  <div className=\"row\">\n    <div>\n      <Button handler={props.imsActions.signIn} text={\"Sign In\"}></Button>\n    </div>\n\n    <div>\n      <Button handler={props.imsActions.signOut} text={\"Sign Out\"}></Button>\n    </div>\n\n    <ReactJson src={props.imslibData} />\n  </div>\n);\n\nexport default ImsThinPresentation;\n","import React from \"react\";\nimport ImsWebHelper from \"./ims-web-helper/ImsWebHelper\";\n\nimport ImsThinPresentation from \"./Ims-Thin-Presentation\";\n\nimport \"./ims.css\";\n\nimport { ImsActions } from \"./actions/ims-actions\";\nimport { ImsData } from \"./data/ims-data\";\n\nexport default class ImsThin extends React.Component {\n  imsActions = null;\n  imsEvents = null;\n\n  constructor() {\n    super();\n\n    const imsData = new ImsData(this.onStateChanged);\n\n    window.adobeid = imsData.adobeIdData;\n\n    this.state = {\n      initialized: false,\n      imslibData: imsData.imslibData,\n    };\n\n    ImsWebHelper.injectAdobeImsThin().then(() => {\n      this.adobeIMS = window[\"adobeIMS\"];\n      this.imsActions = new ImsActions(this.adobeIMS, imsData);\n\n      this.setState({ initialized: true });\n    });\n  }\n\n  onStateChanged = (newState) => {\n    this.setState({ imslibData: newState });\n  };\n\n  render() {\n    if (!this.state.initialized) {\n      return <div>LOADING...</div>;\n    }\n\n    return (\n      <ImsThinPresentation\n        imsActions={this.imsActions}\n        imslibData={this.state.imslibData}\n      ></ImsThinPresentation>\n    );\n  }\n}\n","import React from \"react\";\n\nimport ImsThinPresentation from \"./Ims-Thin-Presentation\";\n\nimport \"./ims.css\";\n\nimport { ImsActions } from \"./actions/ims-actions\";\nimport { ImsData } from \"./data/ims-data\";\n\nimport { AdobeIMSThin}  from \"@identity/imslib-thin\";\n\nexport default class ImsThinNpm extends React.Component {\n\n  imsActions = null;\n  imsEvents = null;\n\n  adobeid = {\n    client_id: \"IMSLibJSTestClient\",\n    locale: \"en_US\",\n    scope: \"AdobeID,openid,creative_cloud\",\n    environment: \"stg1\",\n    key: \"adobeIMS\",\n    logsEnabled: true,\n  };\n\n  state = {\n      initialized: true,\n      imslibData: null,\n  };\n\n  componentDidMount() {\n\n    const imsData = new ImsData(this.onStateChanged, this.adobeid);\n\n    this.adobeIMS = new AdobeIMSThin(imsData.adobeIdData);\n\n    this.imsActions = new ImsActions(this.adobeIMS, imsData);\n\n    this.adobeIMS.initialize();\n  }\n\n  onStateChanged = (newState) => {\n    const fragmentValues = this.imsActions.getFragmentValues();\n    const token = fragmentValues['access_token'];\n    if(token) {\n        this.setState({ imslibData: {\n              ...newState,\n                token,\n                isSignedInUser: true,\n          }});\n    } else\n      this.setState({imslibData : newState});\n  };\n\n  render() {\n    if (!this.state.initialized || !this.imsActions) {\n      return <div>LOADING...</div>;\n    }\n\n    return (\n        <ImsThinPresentation\n    imsActions={this.imsActions}\n    imslibData={this.state.imslibData} />\n  );\n  }\n}\n","import React, { Component } from \"react\";\nimport {\n  HashRouter as Router,\n  Redirect,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\";\n\nimport './App.css';\nimport ImsCdn from './ims/Ims-Cdn';\nimport ImsNpmMultipleClients from './ims/Ims-Npm-Multiple-Clients';\n\nimport Home from './ims/Home';\nimport ImsThin from './ims/Ims-Thin';\nimport ImsThinNpm from './ims/Ims-Thin-Npm';\n\nclass App extends Component {\n  /**\n   * function used to determine the old_hash value contained into the source\n   * @param source {String} represents the input source used to determine the old_hash\n   * @returns {String}\n   */\n  getOldHash = (source) => {\n    if (!source) {\n      return \"\";\n    }\n    const match = source.match(\"old_hash=(.*?)&from_ims=true\");\n    if (!match) {\n      return \"\";\n    }\n    return decodeURIComponent(match[1]);\n  };\n\n  render() {\n    const oldHash = this.getOldHash(window.location.hash);\n    \n    return (\n      <Router>\n        <div>\n          <header className=\"App-header\">\n            <svg\n              className=\"Gnav-logo-image\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"20\"\n              height=\"17\"\n              viewBox=\"0 0 24 20\"\n              focusable=\"false\"\n            >\n              <path\n                fill=\"#FF0000\"\n                d=\"M15.1,0H24v20L15.1,0z M8.9,0H0v20L8.9,0z M12,7.4L17.6,20h-3.8l-1.6-4H8.1L12,7.4z\"\n              ></path>\n            </svg>\n            <h4> Adobe IMS application testing </h4>\n          </header>\n\n          <div className=\"imsweb center-xs\">\n            <nav>\n              <ul className=\"linear\">\n                <li>\n                  <Link to=\"/\">Home</Link>\n                </li>\n                <li>\n                  <Link to=\"/cdn\">CDN</Link>\n                </li>\n                <li>\n                  <Link to=\"/npm\">NPM</Link>\n                </li>\n                <li>\n                  <Link to=\"/thin\">Thin</Link>\n                </li>\n                <li>\n                  <Link to=\"/thinnpm\">Thin (NPM)</Link>\n                </li>\n              </ul>\n            </nav>\n\n            {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n            <Switch>\n              <Route path=\"/cdn\" component={ImsCdn}/>\n              <Route path=\"/npm\" component={ImsNpmMultipleClients}/>\n              <Route path=\"/thin\" component={ImsThin}/>\n              <Route path=\"/thinnpm\" component={ImsThinNpm}/>\n              <Route path=\"/\" component={Home}/>\n            </Switch>\n          </div>\n        </div>\n\n        {oldHash?  (\n            <Redirect push to={`${oldHash}?${window.location.hash}`}></Redirect>\n          ): null \n        }\n\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      console.log(process.env);\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'flexboxgrid/css/flexboxgrid.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}